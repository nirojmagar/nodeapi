{
  "_from": "passport-jwt",
  "_id": "passport-jwt@3.0.1",
  "_inBundle": false,
  "_integrity": "sha1-5Pcnba2L0lHUPG/DiIMTC5YycvY=",
  "_location": "/passport-jwt",
  "_phantomChildren": {
    "jws": "3.1.4",
    "lodash.once": "4.1.1",
    "moment": "2.20.1",
    "ms": "2.0.0",
    "xtend": "4.0.1"
  },
  "_requested": {
    "escapedName": "passport-jwt",
    "fetchSpec": "latest",
    "name": "passport-jwt",
    "raw": "passport-jwt",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/passport-jwt/-/passport-jwt-3.0.1.tgz",
  "_shasum": "e4f7276dad8bd251d43c6fc38883130b963272f6",
  "_shrinkwrap": null,
  "_spec": "passport-jwt",
  "_where": "C:\\Users\\ngr\\WebstormProjects\\APIAuthentication",
  "author": {
    "name": "Mike Nicholson"
  },
  "bugs": {
    "url": "https://github.com/themikenicholson/passport-jwt/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "jsonwebtoken": "^7.0.0",
    "passport-strategy": "^1.0.0"
  },
  "deprecated": false,
  "description": "Passport authentication strategy using JSON Web Tokens",
  "devDependencies": {
    "chai": "^3.0.0",
    "chai-passport-strategy": "^1.0.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.0.0",
    "sinon": "^1.0.0"
  },
  "homepage": "https://github.com/themikenicholson/passport-jwt",
  "keywords": [
    "Passport",
    "Strategy",
    "JSON",
    "Web",
    "Token",
    "JWT"
  ],
  "license": "MIT",
  "main": "./lib",
  "name": "passport-jwt",
  "optionalDependencies": {},
  "readme": "\r\n\r\n# passport-jwt\r\n\r\n[![Build Status](https://travis-ci.org/themikenicholson/passport-jwt.svg?branch=master)](https://travis-ci.org/themikenicholson/passport-jwt)\r\n[![Code Climate](https://codeclimate.com/github/themikenicholson/passport-jwt/badges/gpa.svg)](https://codeclimate.com/github/themikenicholson/passport-jwt)\r\n\r\nA [Passport](http://passportjs.org/) strategy for authenticating with a\r\n[JSON Web Token](http://jwt.io).\r\n\r\nThis module lets you authenticate endpoints using a JSON web token. It is\r\nintended to be used to secure RESTful endpoints without sessions.\r\n\r\n## Install\r\n\r\n    npm install passport-jwt\r\n\r\n## Usage\r\n\r\n### Configure Strategy\r\n\r\nThe JWT authentication strategy is constructed as follows:\r\n\r\n    new JwtStrategy(options, verify)\r\n\r\n`options` is an object literal containing options to control how the token is\r\nextracted from the request or verified.\r\n\r\n* `secretOrKey` is a string or buffer containing the secret\r\n  (symmetric) or PEM-encoded public key (asymmetric) for verifying the token's\r\n  signature. REQUIRED unless `secretOrKeyProvider` is provided.\r\n* `secretOrKeyProvider` is a callback in the format `function secretOrKeyProvider(request, rawJwtToken, done)`,\r\n  which should call `done` with a secret or PEM-encoded public key (asymmetric) for the given key and request combination.\r\n  `done` accepts arguments in the format `function done(err, secret)`. Note it is up to the implementer to decode rawJwtToken.\r\n  REQUIRED unless `secretOrKey` is provided.\r\n* `jwtFromRequest` (REQUIRED) Function that accepts a request as the only\r\n  parameter and returns either the JWT as a string or *null*. See\r\n  [Extracting the JWT from the request](#extracting-the-jwt-from-the-request) for\r\n  more details.\r\n* `issuer`: If defined the token issuer (iss) will be verified against this\r\n  value.\r\n* `audience`: If defined, the token audience (aud) will be verified against\r\n  this value.\r\n* `algorithms`: List of strings with the names of the allowed algorithms. For instance, [\"HS256\", \"HS384\"].\r\n* `ignoreExpiration`: if true do not validate the expiration of the token.\r\n* `passReqToCallback`: If true the request will be passed to the verify\r\n  callback. i.e. verify(request, jwt_payload, done_callback).\r\n* `jsonWebTokenOptions`: passport-jwt is verifying the token using [jsonwebtoken](https://github.com/auth0/node-jsonwebtoken).\r\nPass here an options object for any other option you can pass the jsonwebtoken verifier. (i.e maxAge)\r\n\r\n`verify` is a function with the parameters `verify(jwt_payload, done)`\r\n\r\n* `jwt_payload` is an object literal containing the decoded JWT payload.\r\n* `done` is a passport error first callback accepting arguments\r\n  done(error, user, info)\r\n\r\nAn example configuration which reads the JWT from the http\r\nAuthorization header with the scheme 'bearer':\r\n\r\n```js\r\nvar JwtStrategy = require('passport-jwt').Strategy,\r\n    ExtractJwt = require('passport-jwt').ExtractJwt;\r\nvar opts = {}\r\nopts.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\r\nopts.secretOrKey = 'secret';\r\nopts.issuer = 'accounts.examplesoft.com';\r\nopts.audience = 'yoursite.net';\r\npassport.use(new JwtStrategy(opts, function(jwt_payload, done) {\r\n    User.findOne({id: jwt_payload.sub}, function(err, user) {\r\n        if (err) {\r\n            return done(err, false);\r\n        }\r\n        if (user) {\r\n            return done(null, user);\r\n        } else {\r\n            return done(null, false);\r\n            // or you could create a new account\r\n        }\r\n    });\r\n}));\r\n```\r\n\r\n### Extracting the JWT from the request\r\n\r\nThere are a number of ways the JWT may be included in a request.  In order to remain as flexible as\r\npossible the JWT is parsed from the request by a user-supplied callback passed in as the\r\n`jwtFromRequest` parameter.  This callback, from now on referred to as an extractor,\r\naccepts a request object as an argument and returns the encoded JWT string or *null*.\r\n\r\n#### Included extractors\r\n\r\nA number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory\r\nfunctions return a new extractor configured with the given parameters.\r\n\r\n* ```fromHeader(header_name)``` creates a new extractor that looks for the JWT in the given http\r\n  header\r\n* ```fromBodyField(field_name)``` creates a new extractor that looks for the JWT in the given body\r\n  field.  You must have a body parser configured in order to use this method.\r\n* ```fromUrlQueryParameter(param_name)``` creates a new extractor that looks for the JWT in the given\r\n  URL query parameter.\r\n* ```fromAuthHeaderWithScheme(auth_scheme)``` creates a new extractor that looks for the JWT in the\r\n  authorization header, expecting the scheme to match auth_scheme.\r\n* ```fromAuthHeaderAsBearerToken()``` creates a new extractor that looks for the JWT in the authorization header\r\n  with the scheme 'bearer'\r\n* ```fromExtractors([array of extractor functions])``` creates a new extractor using an array of\r\n  extractors provided. Each extractor is attempted in order until one returns a token.\r\n\r\n### Writing a custom extractor function\r\n\r\nIf the supplied extractors don't meet your needs you can easily provide your own callback. For\r\nexample, if you are using the cookie-parser middleware and want to extract the JWT in a cookie\r\nyou could use the following function as the argument to the jwtFromRequest option:\r\n\r\n```\r\nvar cookieExtractor = function(req) {\r\n    var token = null;\r\n    if (req && req.cookies)\r\n    {\r\n        token = req.cookies['jwt'];\r\n    }\r\n    return token;\r\n};\r\n```\r\n\r\n### Authenticate requests\r\n\r\nUse `passport.authenticate()` specifying `'JWT'` as the strategy.\r\n\r\n```js\r\napp.post('/profile', passport.authenticate('jwt', { session: false }),\r\n    function(req, res) {\r\n        res.send(req.user.profile);\r\n    }\r\n);\r\n```\r\n\r\n### Include the JWT in requests\r\n\r\nThe strategy will first check the request for the standard *Authorization*\r\nheader. If this header is present and the scheme matches `options.authScheme`\r\nor 'JWT' if no auth scheme was specified then the token will be retrieved from\r\nit. e.g.\r\n\r\n    Authorization: JWT JSON_WEB_TOKEN_STRING.....\r\n\r\nIf the authorization header with the expected scheme is not found, the request\r\nbody will be checked for a field matching either `options.tokenBodyField` or\r\n`auth_token` if the option was not specified.\r\n\r\nFinally, the URL query parameters will be checked for a field matching either\r\n`options.tokenQueryParameterName` or `auth_token` if the option was not\r\nspecified.\r\n\r\n## Supported By\r\n\r\nIf you want to quickly add secure token-based authentication to Node.js apps, feel free to check out Auth0's Node.js SDK and free plan at [auth0.com/overview](https://auth0.com/overview?utm_source=GHsponsor&utm_medium=GHsponsor&utm_campaign=passport-jwt&utm_content=auth) <img alt='Auth0 Logo' src='https://s3.amazonaws.com/passport-jwt-img/Auth0+logo.svg'/>\r\n\r\n## Migrating\r\n\r\nThe the [Migration Guide](docs/migrating.md) for help upgrading to the latest\r\nmajor version of passport-jwt\r\n\r\n## Tests\r\n\r\n    npm install\r\n    npm test\r\n\r\nTo generate test-coverage reports:\r\n\r\n    npm install -g istanbul\r\n    npm run-script testcov\r\n    istanbul report\r\n\r\n## License\r\n\r\nThe [MIT License](http://opensource.org/licenses/MIT)\r\n\r\nCopyright (c) 2015 Mike Nicholson\r\n\r\n<a target='_blank' rel='nofollow' href='https://app.codesponsor.io/link/wkA4NAa5HS7HRsfBixR5saSs/themikenicholson/passport-jwt'>\r\n  <img alt='Sponsor' width='888' height='68' src='https://app.codesponsor.io/embed/wkA4NAa5HS7HRsfBixR5saSs/themikenicholson/passport-jwt.svg' />\r\n</a>\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/themikenicholson/passport-jwt.git"
  },
  "scripts": {
    "test": "mocha --reporter spec --require test/bootstrap test/*test.js",
    "testcov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter spec --require test/bootstrap test/*test.js"
  },
  "version": "3.0.1"
}
