{
  "_from": "joi",
  "_id": "joi@13.1.1",
  "_inBundle": false,
  "_integrity": "sha512-Y44bDwIoeCjFDRO18VaMRc0hIdPkLbZaF2VqU7t1tCcno3S3XzsmlYYpOu0Qk6nkzoI5RSao7W57NTvPKxbkcg==",
  "_location": "/joi",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "joi",
    "fetchSpec": "latest",
    "name": "joi",
    "raw": "joi",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/joi/-/joi-13.1.1.tgz",
  "_shasum": "1f306a5c3ded496da46629915d09e1ae3825185c",
  "_shrinkwrap": null,
  "_spec": "joi",
  "_where": "C:\\Users\\ngr\\WebstormProjects\\APIAuthentication",
  "bugs": {
    "url": "https://github.com/hapijs/joi/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "hoek": "5.x.x",
    "isemail": "3.x.x",
    "topo": "3.x.x"
  },
  "deprecated": false,
  "description": "Object schema validation",
  "devDependencies": {
    "code": "5.x.x",
    "hapitoc": "1.x.x",
    "lab": "15.x.x"
  },
  "engines": {
    "node": ">=8.9.0"
  },
  "homepage": "https://github.com/hapijs/joi",
  "keywords": [
    "hapi",
    "schema",
    "validation"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "name": "joi",
  "optionalDependencies": {},
  "readme": "![joi Logo](https://raw.github.com/hapijs/joi/master/images/joi.png)\r\n\r\nObject schema description language and validator for JavaScript objects.\r\n\r\n[![npm version](https://badge.fury.io/js/joi.svg)](http://badge.fury.io/js/joi)\r\n[![Build Status](https://secure.travis-ci.org/hapijs/joi.svg?branch=master)](http://travis-ci.org/hapijs/joi)\r\n<!--\r\n\r\nRemove those badges until they work properly on semver.\r\n\r\n[![Dependencies Status](https://david-dm.org/hapijs/joi.svg)](https://david-dm.org/hapijs/joi)\r\n[![DevDependencies Status](https://david-dm.org/hapijs/joi/dev-status.svg)](https://david-dm.org/hapijs/joi#info=devDependencies)\r\n\r\n-->\r\n[![NSP Status](https://nodesecurity.io/orgs/hapijs/projects/0394bf83-b5bc-410b-878c-e8cf1b92033e/badge)](https://nodesecurity.io/orgs/hapijs/projects/0394bf83-b5bc-410b-878c-e8cf1b92033e)\r\n[![Known Vulnerabilities](https://snyk.io/test/github/hapijs/joi/badge.svg)](https://snyk.io/test/github/hapijs/joi)\r\n\r\n[![Join the chat at https://gitter.im/hapijs/joi](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/hapijs/joi?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nLead Maintainer: [Nicolas Morel](https://github.com/marsup)\r\n\r\n# Introduction\r\n\r\nImagine you run facebook and you want visitors to sign up on the website with real names and not something like `l337_p@nda` in the first name field. How would you define the limitations of what can be inputted and validate it against the set rules?\r\n\r\nThis is joi, joi allows you to create *blueprints* or *schemas* for JavaScript objects (an object that stores information) to ensure *validation* of key information.\r\n\r\n# API\r\nSee the detailed [API Reference](https://github.com/hapijs/joi/blob/v13.1.1/API.md).\r\n\r\n# Example\r\n\r\n```javascript\r\nconst Joi = require('joi');\r\n\r\nconst schema = Joi.object().keys({\r\n    username: Joi.string().alphanum().min(3).max(30).required(),\r\n    password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/),\r\n    access_token: [Joi.string(), Joi.number()],\r\n    birthyear: Joi.number().integer().min(1900).max(2013),\r\n    email: Joi.string().email()\r\n}).with('username', 'birthyear').without('password', 'access_token');\r\n\r\n// Return result.\r\nconst result = Joi.validate({ username: 'abc', birthyear: 1994 }, schema);\r\n// result.error === null -> valid\r\n\r\n// You can also pass a callback which will be called synchronously with the validation result.\r\nJoi.validate({ username: 'abc', birthyear: 1994 }, schema, function (err, value) { });  // err === null -> valid\r\n\r\n```\r\n\r\nThe above schema defines the following constraints:\r\n* `username`\r\n    * a required string\r\n    * must contain only alphanumeric characters\r\n    * at least 3 characters long but no more than 30\r\n    * must be accompanied by `birthyear`\r\n* `password`\r\n    * an optional string\r\n    * must satisfy the custom regex\r\n    * cannot appear together with `access_token`\r\n* `access_token`\r\n    * an optional, unconstrained string or number\r\n* `birthyear`\r\n    * an integer between 1900 and 2013\r\n* `email`\r\n    * a valid email address string\r\n\r\n# Usage\r\n\r\nUsage is a two steps process. First, a schema is constructed using the provided types and constraints:\r\n\r\n```javascript\r\nconst schema = {\r\n    a: Joi.string()\r\n};\r\n```\r\n\r\nNote that **joi** schema objects are immutable which means every additional rule added (e.g. `.min(5)`) will return a\r\nnew schema object.\r\n\r\nThen the value is validated against the schema:\r\n\r\n```javascript\r\nconst {error, value} = Joi.validate({ a: 'a string' }, schema);\r\n\r\n// or\r\n\r\nJoi.validate({ a: 'a string' }, schema, function (err, value) { });\r\n```\r\n\r\nIf the input is valid, then the error will be `null`, otherwise it will be an Error object.\r\n\r\nThe schema can be a plain JavaScript object where every key is assigned a **joi** type, or it can be a **joi** type directly:\r\n\r\n```javascript\r\nconst schema = Joi.string().min(10);\r\n```\r\n\r\nIf the schema is a **joi** type, the `schema.validate(value, callback)` can be called directly on the type. When passing a non-type schema object,\r\nthe module converts it internally to an object() type equivalent to:\r\n\r\n```javascript\r\nconst schema = Joi.object().keys({\r\n    a: Joi.string()\r\n});\r\n```\r\n\r\nWhen validating a schema:\r\n\r\n* Values (or keys in case of objects) are optional by default.\r\n\r\n    ```javascript\r\n    Joi.validate(undefined, Joi.string()); // validates fine\r\n    ```\r\n\r\n    To disallow this behavior, you can either set the schema as `required()`, or set `presence` to `\"required\"` when passing `options`:\r\n\r\n    ```javascript\r\n    Joi.validate(undefined, Joi.string().required());\r\n    // or\r\n    Joi.validate(undefined, Joi.string(), /* options */ { presence: \"required\" });\r\n    ```\r\n\r\n* Strings are utf-8 encoded by default.\r\n* Rules are defined in an additive fashion and evaluated in order after whitelist and blacklist checks.\r\n\r\n# Browsers\r\n\r\nJoi doesn't directly support browsers, but you could use [joi-browser](https://github.com/jeffbski/joi-browser) for an ES5 build of Joi that works in browsers, or as a source of inspiration for your own builds.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/joi.git"
  },
  "scripts": {
    "test": "lab -t 100 -a code -L",
    "test-cov-html": "lab -r html -o coverage.html -a code",
    "test-debug": "lab -a code",
    "toc": "hapitoc",
    "version": "npm run toc && git add API.md README.md"
  },
  "version": "13.1.1"
}
